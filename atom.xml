<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LincnWang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-26T02:07:03.649Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lincnwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STM32CubeMX的编码器接口</title>
    <link href="http://yoursite.com/2019/04/25/STM32CubeMX%E7%9A%84%E7%BC%96%E7%A0%81%E5%99%A8%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/04/25/STM32CubeMX的编码器接口/</id>
    <published>2019-04-25T12:48:34.000Z</published>
    <updated>2019-04-26T02:07:03.649Z</updated>
    
    <content type="html"><![CDATA[<p>编码器是将位移或者角度转换为电信号的仪器，按照读出方式编码器可以分为接触式和非接触式两种；按照工作原理可分为增量式和绝对式两种。增量式编码器是将位移转换成周期性的电信号，再把这个电信号转变为计数脉冲，用脉冲的个数表示位移的大小。绝对式编码器的每一个位置对应一个确定的数字码，因此它的示值只与测量的起始和终止位置有关，而与测量的中间过程无关。<br>由于绝对式编码器是直接去读位置，所以其位置信息是通过通讯的方式进行读取，相对增量式编码器使用更加简单（通常价格也更加昂贵，且通常情况下量程较短，类似于光栅尺的低阶版）。所以在使用中我们更多的关注点在如何精确读取增量式编码器的值。<br>首先我们应该知道，一般增量式编码器的输出有集电极开路输出，推拉输出以及线驱动输出。输出信号类型目前一般都是正交信号AB相输出加上参考零位信号Z相输出的方式。当然也有更少的只有A相或者AB相输出和更多的A，\overline{A}，B，\overline{B}，Z，\overline{Z}输出，A，\overline{A}为互补的一组信号。其中A、B为相差90°的脉冲，Z相信号在编码器旋转一周发出一个脉冲信号，通常用作参考零位。通常我们通过判定AB相信号的前后位置来判定编码器正转和反转。</p><p><img src="/2019/04/25/STM32CubeMX的编码器接口/1.png" alt="测试图片"><br><img src="/2019/04/25/STM32CubeMX的编码器接口/2.png" alt="测试图片"></p><p>了解了增量式编码器的工作原理，接下来我们看看应该如何是该它。STM32给我们预留了该增量式编码器的硬件接口。通过STM32CubeMX对gpio进行配置后，将增量式编码器的AB两相信号接到STM32的对应IO口上，当编码器工作时，STM32会硬件记录编码器的信号值，此时编码器正转或者反转，STM32会自己进行硬件加减运算，使用方便且精度高，记录也很精确。<br>这里我们使用的MCU是STM32F103RCT6，编码器为光洋电子的TRD-2T，两相+原点增量式旋转编码器</p><p>STM32的编码器接口模式基本上相当于使用了一个带有方向选择的外部时钟这里我们使用TIM3。首先我们使用CubeMX配置PA6和PA7的功能为TIM3_CH1和TIM3_CH2,然后配置TIM3为编码器接口模式。</p><p><img src="/2019/04/25/STM32CubeMX的编码器接口/3.png" alt="测试图片"><br><img src="/2019/04/25/STM32CubeMX的编码器接口/4.png" alt="测试图片"></p><p>由于STM32的编码器接口计数方式为上升沿和下降沿都要计数，所以对于AB两相信号为方波来说其编码器的值为实际值的4倍，故PSC配置为4-1，其他的主要配置清单如图：</p><p><img src="/2019/04/25/STM32CubeMX的编码器接口/5.png" alt="测试图片"></p><p>同时建议使用中断方式读取处理编码器，所以我们打开TIM3的全局中断：</p><p><img src="/2019/04/25/STM32CubeMX的编码器接口/6.png" alt="测试图片"></p><p>以上就是CubeMX上对编码器接口的配置，接下来我们生成MDK-ARM工程，用keil打开，在main函数中使用以下函数对编码器寄存器值清零：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim3,0);</span><br></pre></td></tr></table></figure></p><p>然后打开定时器的encoder模式（查询或中断模式）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Encoder_Start(&amp;htim3, TIM_CHANNEL_ALL);   //打开定时器的encoder模式</span><br><span class="line">HAL_TIM_Encoder_Start_IT(&amp;htim3, TIM_CHANNEL_ALL); //打开定时器的encoder中断模式</span><br></pre></td></tr></table></figure></p><p>如果使用查询模式，则直接使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encoder_cnt = (uint32_t)(__HAL_TIM_GET_COUNTER(&amp;htim3));//获取定时器的值</span><br></pre></td></tr></table></figure></p><p>即可获取当前编码器的值。<br>如果使用中断方式，则编码器每给一个信号，STM32就会进入编码器定时器中断，可在该中断中控制电机，使控制更加精确，灵敏。中断函数为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)</span><br><span class="line">&#123;</span><br><span class="line">if(htim -&gt;Instance == htim3.Instance)</span><br><span class="line">&#123;</span><br><span class="line">encoder_cnt = (uint32_t)(__HAL_TIM_GET_COUNTER(&amp;htim3));</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制中我们还可以将Z相接入外部中断，对编码器做零位处理，使得获取到的编码器值更加准确。</p>]]></content>
    
    <summary type="html">
    
      使用STM32CubeMX配置STM32的编码器接口，可直接通过读寄存器获取编码器值。
    
    </summary>
    
      <category term="hardware" scheme="http://yoursite.com/categories/hardware/"/>
    
    
      <category term="STM32" scheme="http://yoursite.com/tags/STM32/"/>
    
      <category term="编码器" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E5%99%A8/"/>
    
      <category term="CubeMX" scheme="http://yoursite.com/tags/CubeMX/"/>
    
  </entry>
  
  <entry>
    <title>中兴众星捧月算法大赛</title>
    <link href="http://yoursite.com/2019/04/25/%E4%B8%AD%E5%85%B4%E4%BC%97%E6%98%9F%E6%8D%A7%E6%9C%88%E7%AE%97%E6%B3%95%E5%A4%A7%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/04/25/中兴众星捧月算法大赛/</id>
    <published>2019-04-25T06:23:51.000Z</published>
    <updated>2019-04-25T11:16:46.240Z</updated>
    
    <content type="html"><![CDATA[<p>在本次算法大赛中，我使用的是最简单的匹配方法，对报文原数据进行匹配，使用C的标准输入输出，赛题判定通过牛客网在线判定系统，对生成的T对数和匹配结果进行判定分数（此题判定方法存在bug，最终中兴专家会分析代码结合算法思路文档对答题正确与否进行判定）。虽然我的算法是最笨的方法，不过我已经反复测试验算，将本方法能优化到的地方进行了优化，应该是完全涵盖了所有的数据测试结果。最后我会附上源码，如有误欢迎指正！</p><h1 id="赛题解读"><a href="#赛题解读" class="headerlink" title="赛题解读"></a>赛题解读</h1><p>T在网络通信领域应用中自然也不会缺席，并且网络专家们提供了极其简单的方法来操控T。相比传统的内存往其地址上写0和1组成的data（数据），我们只要再加一个mask（掩码）便能显现T的特性。例如我们写一个data:0b00000010和一个mask:0b11111110（data、mask bits一一对应），它表示的数就是（result）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 b 0 0 0 0 0 0 1 0（data）</span><br><span class="line">0 b 1 1 1 1 1 1 1 0（mask）</span><br><span class="line">--------------------------------</span><br><span class="line">0 b 0 0 0 0 0 0 1 *（result）</span><br></pre></td></tr></table></figure></p><p>也就是说mask中bit为1，result相应bit维持data原值；mask中bit为0，不管data相应bit原来是0还是1，result相应bit就为<em>；反过来，如果bit要写0或者1，就置data bit为0或者1，mask为1，如果bit既要表示0又要表示1就置mask相应bit为0。示例中因为</em>即可以表示0又可以表示1，所以我们实际写进去的result就表示了2（0b00000010）和3（0b00000011）两个数。操控So easy!<br>很快专家们发现这个属性非常适合用于网络通信中的报文分类，所谓报文分类就是指给定一些规则和报文，找出每个报文各属于哪个规则，规则中指定了几个字段的值和匹配的规则，本质上就是数值的比较，常见的匹配规则有：</p><ul><li>前缀匹配：仅前缀部分相同</li><li>精确匹配：每位都必须相同</li><li>范围匹配：字段值必须在一个范围之内</li></ul><p>IPv4地址（32bits)为前缀匹配如：格式1.1.1.0/24表示如果报文的IP跟规则的前24bits相同就算匹配，在T中可以表示为data:0x01010100，mask:0xffffff00即后8bits任意。<br>协议号（8bits)为精确匹配如：格式0x11/0xff表示每位都必须相同，在T中可以表示为data:0x11，mask:0xff即每个bits都关心。</p><h2 id="赛题内容"><a href="#赛题内容" class="headerlink" title="赛题内容"></a>赛题内容</h2><p>对由五元组即目的IPv4地址、源IPv4地址、目的端口、源端口、协议5个字段以及结果组成的规则进行处理得到满足T属性的数据；给定报文进行正确的分类，找到报文匹配的规则对应的结果。标准输入包含了多个规则（包括规则对应的结果）以及多个报文，具体格式见后面的说明，程序需要实现的功能：<br>1.读取标准输入中的规则部分，生成满足T属性的数据并输出到标准输出。<br>2.读取标准输入中的报文部分，使用1中的输出数据（存放在内存中的数据）进行分类，找到匹配的条目对应的结果输出到标准输出。<br><strong>特别说明</strong><br>1）2中报文跟T中的data、mask条目匹配是指报文的每个bit跟条目中的每个bit都匹配，单个bit匹配规则如下：</p><table><thead><tr><th style="text-align:center">mask bit</th><th style="text-align:center">data bit</th><th style="text-align:center">pkt bit</th><th style="text-align:center">match result（1匹配，0不匹配）</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0或者1</td><td style="text-align:center">0或者1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>2）跟T中的data、mask条目进行匹配的数据无需为读取的原始报文。<br>3）不同data、mask对是独立的，不能关联使用。<br>4）规则中IP的前缀长度为8到32，端口为0到65535，协议为0到255，算法需要适应此范围的任何数据。<br>5）规则的每个字段只能单独处理，2中不能根据原始规则数据进行分类。</p><h2 id="程序输入输出"><a href="#程序输入输出" class="headerlink" title="程序输入输出"></a>程序输入输出</h2><p>1) 输入格式：输入分为两个部分，第一部分为规则，第二部分为报文。第一行为总的规则数，从第二行开始为具体的规则，每行包含目的IP、源IP、目的端口、源端口、协议以及结果共6个信息，各个字段之间用空格分隔。规则部分后面为报文部分，报文部分第一行为总的报文数，后面每一行是报文信息，包含目的IP、源IP、目的端口、源端口、协议共5个字段，各个字段之间用空格分隔。见下面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1.1.1.0/24  1.1.2.0/24  1:5  3:3  0x11/0xff  1</span><br><span class="line">1</span><br><span class="line">1.1.1.1  1.1.2.2  5  3  17</span><br></pre></td></tr></table></figure></p><p>2) 输出格式：第一行为五元组每个字段占用的bits数以及数据条目数，后面每两行为一个data/mask对，data/mask为16进制表示，data行最后一个数值为规则对应的结果，如1）中的第一个条规则按照T的属性可以分解成下面的输出（数值32 32 16 16 8仅仅是示例）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 5</span><br><span class="line">data:0x01010100 0x01010200 0x0001 0x0003 0x11 1//data和mask对</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0002 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0003 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0004 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0005 0x0003 0x111 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br></pre></td></tr></table></figure></p><p>3) 每个报文分类的结果输出到标准输出。<br>如1）中报文1.1.1.1  1.1.2.2  5  3  17得到下面的匹配结果：<br>1<br>因为：</p><ul><li>报文目的IP 1.1.1.1前24bits跟规则中目的IP前24bits相同；</li><li>报文源IP 1.1.2.2前24bits跟规则中源IP前24bits相同；</li><li>报文目的端口5在规则中目的端口1到5的范围内；</li><li>报文源端口3在规则中源端口3到3的范围内；</li><li>协议17跟规则中协议0x11相等。<br>实际分类是使用data、mask对进行匹配，报文能跟2）中第5个data、mask对匹配上，取其结果是1。<br>最终输出内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 5</span><br><span class="line">data:0x01010100 0x01010200 0x0001 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0002 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0003 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0004 0x0003 0x11 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">data:0x01010100 0x01010200 0x0005 0x0003 0x111 1</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>程序使用c语言，首先从标准输入函数scanf中读取规则条数，然后根据条数读取规则存储在结构体中，再读取报文数，读取报文存入结构体，最后生成规则T对，再进行报文分类。使用标准输出printf输出结果。<br>输出规则五元组占用bits数位：32 32 16 16 8 5<br>匹配方式为：data &amp; mask = pit &amp; mask</p><h2 id="IP地址前缀匹配"><a href="#IP地址前缀匹配" class="headerlink" title="IP地址前缀匹配"></a>IP地址前缀匹配</h2><p>IP地址的匹配采用赛题规则中的前缀匹配完成，将规则进行处理，使用前缀生成掩码mask，不关心的bit置0，需要匹配的bit置1，data保持不变。最终将data和mask通过16进制打印出来。<br>示例：<br>读取规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.16.36.14/16 123.218.82.240/25 1:1 1:1 0x1e/0xff 15</span><br></pre></td></tr></table></figure></p><p>生成的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data:0x110240e 0x7bda52f0 0x1 0x1 0x1e 15</span><br><span class="line">mask:0xffff0000 0xffffff80 0xffff 0xffff 0xff</span><br></pre></td></tr></table></figure></p><h2 id="端口范围匹配"><a href="#端口范围匹配" class="headerlink" title="端口范围匹配"></a>端口范围匹配</h2><p>由于端口范围为0-65536，所以使用16bit来表示T对。<br>1、    利用T属性的不关心位 * 来优化容量。<br>如端口为1-5，二进制码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0001</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0100</span><br><span class="line">0101</span><br></pre></td></tr></table></figure></p><p>故4和5可优化为一个T对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 0（data）</span><br><span class="line">1 1 1 0（mask）</span><br><span class="line">---------------</span><br><span class="line">0 1 0 *（result）</span><br></pre></td></tr></table></figure></p><p>同理，2和3也可优化为一个T对。<br><strong>核心思想：</strong>在读取规则时，得到端口起点MIN和终点MAX，将其转换为代表其值的二进制字符串。<br>1、    从终点值MAX的字符串开始，从二进制的低位开始将为1的bit置为0（该数一定会比MAX小），置0后的数为data，mask在MAX置0的bit及高位都为1，置0之后的低位都为0。若data不为0则循环执行该规则，若data为0，说明MAX的最高位1和MIN的最高位1不在一个位置，则开始执行下一规则。<br>①    data &gt; MIN，则此T对有效。循环执行该规则；<br>②    data = MIN，则data = MIN，mask在MAX置0的bit及高位都为1，低位都为0，返回该最后一个有效T对，结束该规则；<br>③    data &lt; MIN，则从此bit开始，循环将MIN的二进制位中有0的bit置为1，此bit之后的低位也置为0，该值赋给data，mask在MIN置1的bit及高位都为1，置1之后的低位都为0，生成一个有效的T对。当到MIN的最低位时，若该bit为1，则data = MIN，mask为0xffff，返回该最后一个有效T对，结束该规则；<br>2、    在MAX的低位往高位不断将1置0的过程中，若已经到达MAX的最高位1时仍然大于MIN（此时MAX只有一个高位1，其他位全为0），此时不断将MAX中的高位1向右移位，生成data，mask在data中为1的bit及高位都为1，之后的低位都置为0。若data不为0则循环执行该规则直到结束。<br>①    data &gt; MIN，则此T对有效。循环执行该规则；<br>②    data = MIN，则返回该最后一个有效T对，结束该规则；<br>③    data &lt; MIN，则从此bit开始，循环将MIN的二进制位中有0的bit置为1，此bit之后的低位也置为0，该值赋给data，mask在MIN置1的bit及高位都为1，置1之后的低位都为0，若此时data &lt; MAX则生成一个有效的T对。当到MIN的最低位时，若该bit为1，则data = MIN，mask为0xffff，返回该最后一个有效T对，结束该规则；<br>说明：当存在某些特殊情况时，例MIN = 0，或者MAX的低位连续为1，或MAX – MIN = 1，或MAX与MIN低位连续相同且为1时，跳出以上规则进行特殊优化处理，大大缩减T对容量。<br>示例：<br>读取规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.16.36.0/24 123.218.82.0/24 0:65535 1:1 0x1e/0xff 15</span><br></pre></td></tr></table></figure></p><p>生成的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 1</span><br><span class="line">data:0x1102400 0x7bda5200 0x0 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0x0 0xffff 0xff</span><br></pre></td></tr></table></figure></p><p>读取规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.16.36.0/24 123.218.82.0/24 98:99 1:1 0x1e/0xff 15</span><br></pre></td></tr></table></figure></p><p>生成的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 1</span><br><span class="line">data:0x1102400 0x7bda5200 0x62 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfffe 0xffff 0xff</span><br></pre></td></tr></table></figure></p><p>读取规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.16.36.0/24 123.218.82.0/24 7:127 1:1 0x1e/0xff 15</span><br></pre></td></tr></table></figure></p><p>生成的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 5</span><br><span class="line">data:0x1102400 0x7bda5200 0x40 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffc0 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0x20 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffe0 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0x10 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfff0 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0x8 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfff8 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0x7 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffff 0xffff 0xff</span><br></pre></td></tr></table></figure></p><p>读取规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.16.36.0/24 123.218.82.0/24 50014:59051 1:1 0x1e/0xff 15</span><br></pre></td></tr></table></figure></p><p>生成的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">32 32 16 16 8 12</span><br><span class="line">data:0x1102400 0x7bda5200 0xe6a8 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfffc 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xe6a0 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfff8 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xe680 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffe0 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xe600 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xff80 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xe400 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfe00 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xe000 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfc00 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xd000 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xf000 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xc800 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xf800 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xc400 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfc00 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xc380 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xff80 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xc360 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xffe0 0xffff 0xff</span><br><span class="line">data:0x1102400 0x7bda5200 0xc35e 0x1 0x1e 15</span><br><span class="line">mask:0xffffff00 0xffffff00 0xfffe 0xffff 0xff</span><br></pre></td></tr></table></figure></p><h2 id="协议精确匹配"><a href="#协议精确匹配" class="headerlink" title="协议精确匹配"></a>协议精确匹配</h2><p>协议匹配的掩码为0xff，每一位都关心，为精确匹配，在报文分类的匹配过程中，只需判定协议是否相等即可。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>算法通过c实现，期间想过使用格雷码（数字汉明距离均为1）和卡洛图的方式进行编码，在一定情况下确实能够进一步优化T对容量，但是优化空间并不大，所以我就没有修改了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">struct RowStr</span><br><span class="line">&#123;</span><br><span class="line">unsigned int IP_objA;</span><br><span class="line">unsigned int IP_objB;</span><br><span class="line">unsigned int IP_objC;</span><br><span class="line">unsigned int IP_objD;</span><br><span class="line">unsigned int IP_obj_prefix;</span><br><span class="line">unsigned int IP_sourceA;</span><br><span class="line">unsigned int IP_sourceB;</span><br><span class="line">unsigned int IP_sourceC;</span><br><span class="line">unsigned int IP_sourceD;</span><br><span class="line">unsigned int IP_source_prefix;</span><br><span class="line">unsigned int Com_objA;</span><br><span class="line">unsigned int Com_objB;</span><br><span class="line">unsigned int Com_sourceA;</span><br><span class="line">unsigned int Com_sourceB;</span><br><span class="line">unsigned int DealA;</span><br><span class="line">unsigned int DealB;</span><br><span class="line">unsigned int result;</span><br><span class="line">&#125;;</span><br><span class="line">struct Message</span><br><span class="line">&#123;</span><br><span class="line">unsigned int IP_objA;</span><br><span class="line">unsigned int IP_objB;</span><br><span class="line">unsigned int IP_objC;</span><br><span class="line">unsigned int IP_objD;</span><br><span class="line">unsigned int IP_sourceA;</span><br><span class="line">unsigned int IP_sourceB;</span><br><span class="line">unsigned int IP_sourceC;</span><br><span class="line">unsigned int IP_sourceD;</span><br><span class="line">unsigned int Com_obj;</span><br><span class="line">unsigned int Com_source;</span><br><span class="line">unsigned int Deal;</span><br><span class="line">&#125;;</span><br><span class="line">struct IPmask</span><br><span class="line">&#123;</span><br><span class="line">unsigned int IP_objAMask;</span><br><span class="line">unsigned int IP_objBMask;</span><br><span class="line">unsigned int IP_objCMask;</span><br><span class="line">unsigned int IP_objDMask;</span><br><span class="line">unsigned int IP_sourceAMask;</span><br><span class="line">unsigned int IP_sourceBMask;</span><br><span class="line">unsigned int IP_sourceCMask;</span><br><span class="line">unsigned int IP_sourceDMask;</span><br><span class="line">&#125;;</span><br><span class="line">struct COMresult</span><br><span class="line">&#123;</span><br><span class="line">unsigned int Com_objData[35];</span><br><span class="line">unsigned int Com_objMask[35];</span><br><span class="line">unsigned int Com_sourceData[35];</span><br><span class="line">unsigned int Com_sourceMask[35];</span><br><span class="line">unsigned int T_pair_obj;</span><br><span class="line">unsigned int T_pair_source;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct RowStr RowData[512];</span><br><span class="line">struct Message Datagram[100];</span><br><span class="line">struct IPmask MaskIP[512];</span><br><span class="line">struct COMresult MaskCom[512];</span><br><span class="line"></span><br><span class="line">unsigned int RowNum, MesNum, maini = 0, mainj = 0, mainm = 0, maink = 0, Ti = 0, T_pairnum = 0, onenum = 0, Find = 0;</span><br><span class="line">const char Binstr[17][5] = &#123;&quot;0000&quot;, &quot;0001&quot;, &quot;0010&quot;, &quot;0011&quot;, &quot;0100&quot;, &quot;0101&quot;, &quot;0110&quot;, &quot;0111&quot;, &quot;1000&quot;,</span><br><span class="line">  &quot;1001&quot;, &quot;1010&quot;, &quot;1011&quot;, &quot;1100&quot;, &quot;1101&quot;, &quot;1110&quot;, &quot;1111&quot;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void OUT_MASKIP(int n);</span><br><span class="line">void OUT_DATAIP(int n);</span><br><span class="line">void DecToBinstr(unsigned int Dec, char *s);</span><br><span class="line">unsigned int BinstrToDec(char *s);</span><br><span class="line">int OUT_DATAMASK_COM(unsigned int MAX, unsigned int MIN, unsigned int data[], unsigned int mask[]);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;RowNum);</span><br><span class="line">maini = 0;</span><br><span class="line">mainj = RowNum;</span><br><span class="line">while(mainj--)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d.%d.%d.%d/%d %d.%d.%d.%d/%d %d:%d %d:%d %x/%x %d&quot;, &amp;RowData[maini].IP_objA, &amp;RowData[maini].IP_objB, &amp;RowData[maini].IP_objC, &amp;RowData[maini].IP_objD, &amp;RowData[maini].IP_obj_prefix,</span><br><span class="line">&amp;RowData[maini].IP_sourceA, &amp;RowData[maini].IP_sourceB, &amp;RowData[maini].IP_sourceC, &amp;RowData[maini].IP_sourceD, &amp;RowData[maini].IP_source_prefix,</span><br><span class="line">&amp;RowData[maini].Com_objA, &amp;RowData[maini].Com_objB, &amp;RowData[maini].Com_sourceA, &amp;RowData[maini].Com_sourceB,</span><br><span class="line">&amp;RowData[maini].DealA, &amp;RowData[maini].DealB,</span><br><span class="line">&amp;RowData[maini].result);</span><br><span class="line">maini++;</span><br><span class="line">&#125;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;MesNum);</span><br><span class="line">maini = 0;</span><br><span class="line">mainj = MesNum;</span><br><span class="line">while(mainj--)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d.%d.%d.%d %d.%d.%d.%d %d %d %d&quot;, &amp;Datagram[maini].IP_objA, &amp;Datagram[maini].IP_objB, &amp;Datagram[maini].IP_objC, &amp;Datagram[maini].IP_objD,</span><br><span class="line">&amp;Datagram[maini].IP_sourceA, &amp;Datagram[maini].IP_sourceB, &amp;Datagram[maini].IP_sourceC, &amp;Datagram[maini].IP_sourceD,</span><br><span class="line">&amp;Datagram[maini].Com_obj, &amp;Datagram[maini].Com_source, </span><br><span class="line">&amp;Datagram[maini].Deal);</span><br><span class="line">maini++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(maini = 0; maini &lt; RowNum; maini++)</span><br><span class="line">&#123;</span><br><span class="line">MaskCom[maini].T_pair_obj = OUT_DATAMASK_COM(RowData[maini].Com_objB, RowData[maini].Com_objA, MaskCom[maini].Com_objData, MaskCom[maini].Com_objMask);</span><br><span class="line"></span><br><span class="line">MaskCom[maini].T_pair_source = OUT_DATAMASK_COM(RowData[maini].Com_sourceB, RowData[maini].Com_sourceA, MaskCom[maini].Com_sourceData, MaskCom[maini].Com_sourceMask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(maini = 0; maini &lt; RowNum; maini++)</span><br><span class="line">&#123;</span><br><span class="line">onenum = MaskCom[maini].T_pair_obj * MaskCom[maini].T_pair_source;</span><br><span class="line">T_pairnum = T_pairnum + onenum;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;32 32 16 16 8 %d\n&quot;, T_pairnum);</span><br><span class="line"></span><br><span class="line">for(maini = 0; maini &lt; RowNum; maini++)</span><br><span class="line">&#123;</span><br><span class="line">for(mainj = 0; mainj &lt; MaskCom[maini].T_pair_obj; mainj++)</span><br><span class="line">&#123;</span><br><span class="line">OUT_MASKIP(maini);</span><br><span class="line"></span><br><span class="line">for(mainm = 0; mainm &lt; MaskCom[maini].T_pair_source; mainm++)</span><br><span class="line">&#123;</span><br><span class="line">OUT_DATAIP(maini);</span><br><span class="line">printf(&quot; 0x%x 0x%x 0x%x %d\n&quot;, MaskCom[maini].Com_objData[mainj], MaskCom[maini].Com_sourceData[mainm], RowData[maini].DealA, RowData[maini].result);</span><br><span class="line"></span><br><span class="line">if(MaskIP[maini].IP_objAMask == 0)</span><br><span class="line">printf(&quot;mask:0x%x0%x0%x0%x0&quot;, MaskIP[maini].IP_objAMask, MaskIP[maini].IP_objBMask, MaskIP[maini].IP_objCMask, MaskIP[maini].IP_objDMask);</span><br><span class="line">else if(MaskIP[maini].IP_objBMask == 0)</span><br><span class="line">printf(&quot;mask:0x%x%x0%x0%x0&quot;, MaskIP[maini].IP_objAMask, MaskIP[maini].IP_objBMask, MaskIP[maini].IP_objCMask, MaskIP[maini].IP_objDMask);</span><br><span class="line">else if(MaskIP[maini].IP_objCMask == 0)</span><br><span class="line">printf(&quot;mask:0x%x%x%x0%x0&quot;, MaskIP[maini].IP_objAMask, MaskIP[maini].IP_objBMask, MaskIP[maini].IP_objCMask, MaskIP[maini].IP_objDMask);</span><br><span class="line">else if(MaskIP[maini].IP_objDMask == 0)</span><br><span class="line">printf(&quot;mask:0x%x%x%x%x0&quot;, MaskIP[maini].IP_objAMask, MaskIP[maini].IP_objBMask, MaskIP[maini].IP_objCMask, MaskIP[maini].IP_objDMask);</span><br><span class="line">else</span><br><span class="line">printf(&quot;mask:0x%x%x%x%x&quot;, MaskIP[maini].IP_objAMask, MaskIP[maini].IP_objBMask, MaskIP[maini].IP_objCMask, MaskIP[maini].IP_objDMask);</span><br><span class="line"></span><br><span class="line">if(MaskIP[maini].IP_sourceAMask == 0)</span><br><span class="line">printf(&quot; 0x%x0%x0%x0%x0&quot;, MaskIP[maini].IP_sourceAMask, MaskIP[maini].IP_sourceBMask, MaskIP[maini].IP_sourceCMask, MaskIP[maini].IP_sourceDMask);</span><br><span class="line">else if(MaskIP[maini].IP_sourceBMask == 0)</span><br><span class="line">printf(&quot; 0x%x%x0%x0%x0&quot;, MaskIP[maini].IP_sourceAMask, MaskIP[maini].IP_sourceBMask, MaskIP[maini].IP_sourceCMask, MaskIP[maini].IP_sourceDMask);</span><br><span class="line">else if(MaskIP[maini].IP_sourceCMask == 0)</span><br><span class="line">printf(&quot; 0x%x%x%x0%x0&quot;, MaskIP[maini].IP_sourceAMask, MaskIP[maini].IP_sourceBMask, MaskIP[maini].IP_sourceCMask, MaskIP[maini].IP_sourceDMask);</span><br><span class="line">else if(MaskIP[maini].IP_sourceDMask == 0)</span><br><span class="line">printf(&quot; 0x%x%x%x%x0&quot;, MaskIP[maini].IP_sourceAMask, MaskIP[maini].IP_sourceBMask, MaskIP[maini].IP_sourceCMask, MaskIP[maini].IP_sourceDMask);</span><br><span class="line">else</span><br><span class="line">printf(&quot; 0x%x%x%x%x&quot;, MaskIP[maini].IP_sourceAMask, MaskIP[maini].IP_sourceBMask, MaskIP[maini].IP_sourceCMask, MaskIP[maini].IP_sourceDMask);</span><br><span class="line"></span><br><span class="line">printf(&quot; 0x%x 0x%x 0x%x\n&quot;, MaskCom[maini].Com_objMask[mainj], MaskCom[maini].Com_sourceMask[mainm], RowData[maini].DealB);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">maini = 0;</span><br><span class="line"></span><br><span class="line">while(maini &lt; MesNum)</span><br><span class="line">&#123;</span><br><span class="line">Find = 0;</span><br><span class="line">for(mainj = 0; mainj &lt; RowNum; mainj++)</span><br><span class="line">&#123;</span><br><span class="line">if(((Datagram[maini].IP_objA &amp; MaskIP[mainj].IP_objAMask) == (RowData[mainj].IP_objA &amp; MaskIP[mainj].IP_objAMask)) &amp;&amp; </span><br><span class="line">((Datagram[maini].IP_objB &amp; MaskIP[mainj].IP_objBMask) == (RowData[mainj].IP_objB &amp; MaskIP[mainj].IP_objBMask)) &amp;&amp; </span><br><span class="line">((Datagram[maini].IP_objC &amp; MaskIP[mainj].IP_objCMask) == (RowData[mainj].IP_objC &amp; MaskIP[mainj].IP_objCMask)) &amp;&amp;</span><br><span class="line">((Datagram[maini].IP_objD &amp; MaskIP[mainj].IP_objDMask) == (RowData[mainj].IP_objD &amp; MaskIP[mainj].IP_objDMask)) &amp;&amp;</span><br><span class="line">((Datagram[maini].IP_sourceA &amp; MaskIP[mainj].IP_sourceAMask) == (RowData[mainj].IP_sourceA &amp; MaskIP[mainj].IP_sourceAMask)) &amp;&amp; </span><br><span class="line">((Datagram[maini].IP_sourceB &amp; MaskIP[mainj].IP_sourceBMask) == (RowData[mainj].IP_sourceB &amp; MaskIP[mainj].IP_sourceBMask)) &amp;&amp;</span><br><span class="line">((Datagram[maini].IP_sourceC &amp; MaskIP[mainj].IP_sourceCMask) == (RowData[mainj].IP_sourceC &amp; MaskIP[mainj].IP_sourceCMask)) &amp;&amp;</span><br><span class="line">((Datagram[maini].IP_sourceD &amp; MaskIP[mainj].IP_sourceDMask) == (RowData[mainj].IP_sourceD &amp; MaskIP[mainj].IP_sourceDMask)))</span><br><span class="line">&#123;</span><br><span class="line">for(mainm = 0; mainm &lt; MaskCom[mainj].T_pair_obj; mainm++)</span><br><span class="line">&#123;</span><br><span class="line">if((Datagram[maini].Com_obj &amp; MaskCom[mainj].Com_objMask[mainm]) == (MaskCom[mainj].Com_objData[mainm] &amp; MaskCom[mainj].Com_objMask[mainm]))</span><br><span class="line">&#123;</span><br><span class="line">for(maink = 0; maink &lt; MaskCom[mainj].T_pair_source; maink++)</span><br><span class="line">&#123;</span><br><span class="line">if((Datagram[maini].Com_source &amp; MaskCom[mainj].Com_sourceMask[maink]) == (MaskCom[mainj].Com_sourceData[maink] &amp; MaskCom[mainj].Com_sourceMask[maink]))</span><br><span class="line">&#123;</span><br><span class="line">if((Datagram[maini].Deal &amp; RowData[mainj].DealB) == (RowData[mainj].DealA  &amp; RowData[mainj].DealB))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, RowData[mainj].result);</span><br><span class="line">Find = 1;</span><br><span class="line">goto LOOP;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(Find == 0)</span><br><span class="line">printf(&quot;0\n&quot;);</span><br><span class="line"></span><br><span class="line">LOOP:maini++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;32 32 16 16 8 %d\n&quot;, T_pairnum);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void OUT_MASKIP(int n)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0, num = 0, remainder = 0;</span><br><span class="line">unsigned int ip_mask = 0x00000000;</span><br><span class="line"></span><br><span class="line">num = RowData[n].IP_obj_prefix / 4;</span><br><span class="line">remainder = RowData[n].IP_obj_prefix % 4;</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; 8; i++)</span><br><span class="line">&#123;</span><br><span class="line">ip_mask = ip_mask &lt;&lt; 4;</span><br><span class="line">if(i &lt; num)</span><br><span class="line">ip_mask = ip_mask + 0xf;</span><br><span class="line">else if(i == num)</span><br><span class="line">&#123;</span><br><span class="line">switch(remainder)&#123;</span><br><span class="line">case 1:</span><br><span class="line">ip_mask = ip_mask + 0x8;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">ip_mask = ip_mask + 0xc;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">ip_mask = ip_mask + 0xe;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">ip_mask = ip_mask + 0x0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">MaskIP[n].IP_objAMask = ip_mask &gt;&gt; 24;</span><br><span class="line">MaskIP[n].IP_objBMask = (ip_mask &amp; 0xff0000) &gt;&gt; 16;</span><br><span class="line">MaskIP[n].IP_objCMask = (ip_mask &amp; 0xff00) &gt;&gt; 8;</span><br><span class="line">MaskIP[n].IP_objDMask = (ip_mask &amp; 0xff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip_mask = 0x00000000;</span><br><span class="line">num = RowData[n].IP_source_prefix / 4;</span><br><span class="line">remainder = RowData[n].IP_source_prefix % 4;</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; 8; i++)</span><br><span class="line">&#123;</span><br><span class="line">ip_mask = ip_mask &lt;&lt; 4;</span><br><span class="line">if(i &lt; num)</span><br><span class="line">ip_mask = ip_mask + 0xf;</span><br><span class="line">else if(i == num)</span><br><span class="line">&#123;</span><br><span class="line">switch(remainder)&#123;</span><br><span class="line">case 1:</span><br><span class="line">ip_mask = ip_mask + 0x8;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">ip_mask = ip_mask + 0xc;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">ip_mask = ip_mask + 0xe;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">ip_mask = ip_mask + 0x0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">MaskIP[n].IP_sourceAMask = ip_mask &gt;&gt; 24;</span><br><span class="line">MaskIP[n].IP_sourceBMask = (ip_mask &amp; 0xff0000) &gt;&gt; 16;</span><br><span class="line">MaskIP[n].IP_sourceCMask = (ip_mask &amp; 0xff00) &gt;&gt; 8;</span><br><span class="line">MaskIP[n].IP_sourceDMask = (ip_mask &amp; 0xff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void OUT_DATAIP(int n)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;data:0x%x&quot;, RowData[n].IP_objA);</span><br><span class="line">// if(RowData[n].IP_objB &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_objB);</span><br><span class="line">// if(RowData[n].IP_objC &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_objC);</span><br><span class="line">// if(RowData[n].IP_objD &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_objD);</span><br><span class="line"></span><br><span class="line">printf(&quot; 0x%x&quot;, RowData[n].IP_sourceA);</span><br><span class="line">// if(RowData[n].IP_sourceB &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_sourceB);</span><br><span class="line">// if(RowData[n].IP_sourceC &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_sourceC);</span><br><span class="line">// if(RowData[n].IP_sourceD &lt; 16)</span><br><span class="line">// printf(&quot;0&quot;);</span><br><span class="line">printf(&quot;%02x&quot;, RowData[n].IP_sourceD);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void DecToBinstr(unsigned int Dec, char *s)</span><br><span class="line">&#123;</span><br><span class="line">unsigned int Com_tempA = 0x0000, Com_tempB = 0x0000, Com_tempC = 0x0000, Com_tempD = 0x0000;</span><br><span class="line"></span><br><span class="line">Com_tempA = Dec &gt;&gt; 12;</span><br><span class="line">Com_tempB = (Dec &amp; 0x0f00) &gt;&gt; 8;</span><br><span class="line">Com_tempC = (Dec &amp; 0x00f0) &gt;&gt; 4;</span><br><span class="line">Com_tempD = Dec &amp; 0x000f;</span><br><span class="line">strcpy(s, Binstr[Com_tempA]);</span><br><span class="line">strcat(s, Binstr[Com_tempB]);</span><br><span class="line">strcat(s, Binstr[Com_tempC]);</span><br><span class="line">strcat(s, Binstr[Com_tempD]);</span><br><span class="line">&#125;</span><br><span class="line">unsigned int BinstrToDec(char *s)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">unsigned int Dec = 0;</span><br><span class="line">char binstrA[5], binstrB[5], binstrC[5], binstrD[5];</span><br><span class="line">for(i = 0; i &lt; 4; i++)</span><br><span class="line">binstrA[i] = s[i];</span><br><span class="line">for(i = 4; i &lt; 8; i++)</span><br><span class="line">binstrB[i - 4] = s[i];</span><br><span class="line">for(i = 8; i &lt; 12; i++)</span><br><span class="line">binstrC[i - 8] = s[i];</span><br><span class="line">for(i = 12; i &lt; 16; i++)</span><br><span class="line">binstrD[i - 12] = s[i];</span><br><span class="line">for(i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strncmp(binstrA, Binstr[i], 4) == 0)</span><br><span class="line">Dec = i;</span><br><span class="line">&#125;</span><br><span class="line">Dec = Dec &lt;&lt; 4;</span><br><span class="line">for(i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strncmp(binstrB, Binstr[i], 4) == 0)</span><br><span class="line">Dec = Dec + i;</span><br><span class="line">&#125;</span><br><span class="line">Dec = Dec &lt;&lt; 4;</span><br><span class="line">for(i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strncmp(binstrC, Binstr[i], 4) == 0)</span><br><span class="line">Dec = Dec + i;</span><br><span class="line">&#125;</span><br><span class="line">Dec = Dec &lt;&lt; 4;</span><br><span class="line">for(i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strncmp(binstrD, Binstr[i], 4) == 0)</span><br><span class="line">Dec = Dec + i;</span><br><span class="line">&#125;</span><br><span class="line">return Dec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int OUT_DATAMASK_COM(unsigned int MAX, unsigned int MIN, unsigned int data[], unsigned int mask[])</span><br><span class="line">&#123;</span><br><span class="line">int i = 0, p[17], j = 0, count = 0, a = 0, t = -1, k = 0, q[17];</span><br><span class="line">char Com_MAX[17], Com_MIN[17], temp[17];</span><br><span class="line">unsigned int Comtemp, masktemp = 0x0000;</span><br><span class="line">DecToBinstr(MAX, Com_MAX);</span><br><span class="line">DecToBinstr(MIN, Com_MIN);</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(Com_MAX[i] == &apos;1&apos;)</span><br><span class="line">&#123;</span><br><span class="line">p[j++] = i;</span><br><span class="line">&#125;</span><br><span class="line">else if(Com_MAX[i] == &apos;0&apos;)</span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line">&#125;</span><br><span class="line">if(Com_MIN[i] == &apos;1&apos;)</span><br><span class="line">&#123;</span><br><span class="line">q[k++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Comtemp = MAX;</span><br><span class="line">count = 0;</span><br><span class="line"></span><br><span class="line">if(Comtemp == MIN)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = 0xffff;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if(Comtemp % 2 == 0)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = 0xffff;</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if(p[0] &lt; t || MIN == 0)</span><br><span class="line">&#123;</span><br><span class="line">for(i = 15; i &gt; t; i--)</span><br><span class="line">&#123;</span><br><span class="line">Com_MAX[i] = &apos;0&apos;;</span><br><span class="line">Comtemp = BinstrToDec(Com_MAX);</span><br><span class="line">if(Comtemp &lt; MIN)</span><br><span class="line">&#123;</span><br><span class="line">Com_MAX[i] = &apos;1&apos;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp == MIN)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = 0x0000;</span><br><span class="line">while(i--)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">&#125;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(p[0] &gt;= t &amp;&amp; MIN != 0)</span><br><span class="line">&#123;</span><br><span class="line">for(i = 15; i &gt; p[0]; i--)</span><br><span class="line">&#123;</span><br><span class="line">Com_MAX[i] = &apos;0&apos;;</span><br><span class="line">Comtemp = BinstrToDec(Com_MAX);</span><br><span class="line">if(Comtemp &lt; MIN)</span><br><span class="line">&#123;</span><br><span class="line">Com_MAX[i] = &apos;1&apos;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp == MIN)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = 0x0000;</span><br><span class="line">while(i--)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">&#125;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">masktemp = 0x0000;</span><br><span class="line">a = i + 1;</span><br><span class="line">while(a--)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Comtemp = BinstrToDec(Com_MAX);</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line"></span><br><span class="line">if(MIN == 0 &amp;&amp; Comtemp == 0)</span><br><span class="line">return count + 1;</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">j = j - (15 - t);</span><br><span class="line">if(j == 0)</span><br><span class="line">&#123;</span><br><span class="line">for(j = 0; j &lt; 16; j++)</span><br><span class="line">if(p[j] == i)</span><br><span class="line">break;</span><br><span class="line">j = j + 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(i = 0; Comtemp != 0; i++)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">Com_MAX[p[j]] = &apos;0&apos;;</span><br><span class="line">Comtemp = BinstrToDec(Com_MAX);</span><br><span class="line">if(Comtemp &gt; MIN)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = (0xffff &lt;&lt; (15 - p[j]) &amp; 0xffff);</span><br><span class="line">if(p[j] == 15)</span><br><span class="line">mask[count] = 0xffff &lt;&lt; 1;</span><br><span class="line">mask[count] = mask[count] &amp; 0xffff;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp == MIN &amp;&amp; Comtemp != 0)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xffff &lt;&lt; (15 - p[j]);</span><br><span class="line">if(p[j] == 15)</span><br><span class="line">mask[count] = 0xffff &lt;&lt; 1;</span><br><span class="line">mask[count] = mask[count] &amp; 0xffff;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp &lt; MIN &amp;&amp; Comtemp != 0)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">masktemp = (0xffff &lt;&lt; (15 - p[j])) &amp; 0xffff;</span><br><span class="line">for(i = p[j] + 1; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">strcpy(temp, Com_MIN);</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">if(temp[i] == &apos;0&apos; &amp;&amp; i != 15)</span><br><span class="line">&#123;</span><br><span class="line">temp[i] = &apos;1&apos;;</span><br><span class="line">Comtemp = BinstrToDec(temp);</span><br><span class="line">Comtemp = Comtemp &amp; masktemp;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">else if(temp[i] == &apos;0&apos; &amp;&amp; i == 15)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xfffe;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xffff;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">masktemp = 0x0000;</span><br><span class="line">Com_MAX[p[0]] = &apos;1&apos;;</span><br><span class="line">a = p[0] + 1;</span><br><span class="line">while(a--)</span><br><span class="line">&#123;</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">&#125;</span><br><span class="line">Comtemp = BinstrToDec(Com_MAX);</span><br><span class="line">if(MIN == 0)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for(i = 0; Comtemp != 0; i++)</span><br><span class="line">&#123;</span><br><span class="line">Comtemp = Comtemp &gt;&gt; 1;</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">if(Comtemp &gt; MIN &amp;&amp; Comtemp != 1)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp == MIN &amp;&amp; Comtemp != 0)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp &lt; MIN &amp;&amp; Comtemp != 0)</span><br><span class="line">&#123;</span><br><span class="line">for(i = q[0] + 1; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">strcpy(temp, Com_MIN);</span><br><span class="line">masktemp = (masktemp &gt;&gt; 1) + 0x8000;</span><br><span class="line">if(temp[i] == &apos;0&apos; &amp;&amp; i != 15)</span><br><span class="line">&#123;</span><br><span class="line">temp[i] = &apos;1&apos;;</span><br><span class="line">Comtemp = BinstrToDec(temp);</span><br><span class="line">Comtemp = Comtemp &amp; masktemp;</span><br><span class="line">if(Comtemp &lt; MAX)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = Comtemp;</span><br><span class="line">mask[count] = masktemp;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(temp[i] == &apos;0&apos; &amp;&amp; i == 15)</span><br><span class="line">&#123;</span><br><span class="line">if(Comtemp &lt; MAX)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xfffe;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(temp[i] == &apos;1&apos; &amp;&amp; i == 15)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xffff;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line">else if(Comtemp == MIN &amp;&amp; Comtemp == 0)</span><br><span class="line">&#123;</span><br><span class="line">data[count] = MIN;</span><br><span class="line">mask[count] = 0xfffe;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return count + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>最后附上我提交的成绩最终排名结果<br><img src="/2019/04/25/中兴众星捧月算法大赛/zet.png" alt="大赛排名"><br>要想进入决赛，必须在算法上有创新，祝大家在大赛中取得好名次！</p></blockquote>]]></content>
    
    <summary type="html">
    
      源自2019中兴众星捧月算法大赛中，迪杰斯特拉门派报文分类赛题。使用T对（data和mask掩码）进行报文分类，包含：前缀匹配：仅前缀部分相同；精确匹配：每位都必须相同；范围匹配：字段值必须在一个范围之内
    
    </summary>
    
      <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
      <category term="中兴大赛" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%85%B4%E5%A4%A7%E8%B5%9B/"/>
    
      <category term="算法大赛" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%A4%A7%E8%B5%9B/"/>
    
      <category term="迪杰斯，报文分类" scheme="http://yoursite.com/tags/%E8%BF%AA%E6%9D%B0%E6%96%AF%EF%BC%8C%E6%8A%A5%E6%96%87%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>博客恢复</title>
    <link href="http://yoursite.com/2019/04/25/%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D/"/>
    <id>http://yoursite.com/2019/04/25/博客恢复/</id>
    <published>2019-04-25T04:10:21.000Z</published>
    <updated>2019-04-25T04:39:43.308Z</updated>
    
    <content type="html"><![CDATA[<p>  我们使用github搭建个人博客后，如果长期未使用，则github会收回github pages，<br>无论我们怎么从新配置域名都无法访问<code>http://username.github.io</code>。<br>  我的方法是删除项目代码库repositories，重新新建项目代码库username.github.io，<br>然后你就可以惊喜的发现可以通过外网直接访问到<code>http://username.github.io</code>了。接下来<br>就是配置SSH密钥，在GitHub账户中添加你的公钥，配置git的个人信息，再做域名映射（这些操作网上百度一大堆，我这里就不做赘述）。<br>  完成以上操作后，将个人本地仓库中的文件通过<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>  生成静态文件并部署到个人新建的代码库中，你就可以发现个人博客已经能够恢复访问了，跟之前的一模一样，当然这个操作必须是你的本地仓库保存完整的情况下。如果本地仓库已经丢失，那么可以通过之前上传到github上的代码库下载到本地，再进行恢复操作。</p>]]></content>
    
    <summary type="html">
    
      长时间未使用博客，域名已经无法访问，怎么恢复博客？
    
    </summary>
    
      <category term="hexo+github 博客恢复" scheme="http://yoursite.com/categories/hexo-github-%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D/"/>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>delete blog</title>
    <link href="http://yoursite.com/2018/02/08/delete-blog/"/>
    <id>http://yoursite.com/2018/02/08/delete-blog/</id>
    <published>2018-02-08T14:19:18.000Z</published>
    <updated>2018-02-08T14:23:36.762Z</updated>
    
    <content type="html"><![CDATA[<p>删除仓库里面 source/_posts/要删除的博文.md</p><p>执行下面命令更新博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure></p><p>注意，不能全部删除_post文件夹下的博文，不然会报错。</p>]]></content>
    
    <summary type="html">
    
      使用hexo删除一篇博文
    
    </summary>
    
      <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Altiumdesigner-shortcuts</title>
    <link href="http://yoursite.com/2018/02/06/Altiumdesigner-shortcuts/"/>
    <id>http://yoursite.com/2018/02/06/Altiumdesigner-shortcuts/</id>
    <published>2018-02-06T13:00:48.000Z</published>
    <updated>2018-02-06T13:08:51.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、通用设置"><a href="#一、通用设置" class="headerlink" title="一、通用设置"></a>一、通用设置</h1><p>1：Alt+F5 全屏获返回全屏。<br>2：按住鼠标滚轮 鼠标上下滑动 放大缩小，按住Ctrl 按住鼠标右键 鼠标上下滑动也放大缩小。<br>3：T/C  交叉探针  看到寻找原理图和PCB的元件位置。<br>4：按住鼠标右键移动鼠标实现图纸的拖动。<br>5：Ctrl+O 打开Choose Document to Open(选择文档)对话框。<br>6：Ctrl+F4 关闭当前文档。<br>7：Ctrl+S 保存当前文档。<br>8：Alt+F4或者W/T 关闭Altium Designer，W/H水平平铺，W/V垂直平铺。<br>9：Shift+F4 平铺已打开的文档。<br>10：Shift+F5 在活动面板和工作区间切换。<br>11：C/C 编译当前的工程。<br>12：C/R 重新编译当前工程。<br>13：End 刷新屏幕。<br>14：Home 定位中心到光标同时刷新屏幕。<br>15：Ctrl+PgDn 调整视图以适合所有对象。<br>16：Ctrl+Z 撤销。<br>17：Ctrl+Y 重新执行。<br>18：BackSpace 在放置导线、总线、直线或多边形时移除最后一个顶点。<br>19：CTRL+SHIFT+ T  、B、L、R、H、V、D可以快速对齐所选中的元件 上 下 左 右 水平 垂直 栅格。<br>20：Shift+C 清除高亮</p><h1 id="二、原理图"><a href="#二、原理图" class="headerlink" title="二、原理图"></a>二、原理图</h1><p>1：按住shift  拖动某个元件，可快速复制。<br>2：Alt+左击 在图纸中高亮所有在网络的元素。<br>4：按住Ctrl 拖动某个元件，可以移动位置，并且保持原来的线连接（在18版中，无需按住Ctrl，直接拖拽即可）。<br>5：Ctrl+H 搜索和替换文本。<br>6：Ctrl+F 查找文本。<br>7：F3 搜索下一个。<br>8：E/M/D或者按住Ctrl 鼠标点击器件完成器件的拖动（和器件连接的线也会跟着移动）。<br>9：Insert 放置相同类型对象的时候复制对象的属性。<br>10：P/W 画线。<br>11：P/T 添加text。<br>12：Shift+拖拽 复制元器件。</p><h1 id="三、PCB"><a href="#三、PCB" class="headerlink" title="三、PCB"></a>三、PCB</h1><p>1：E/S/Y 选中该层全部线条。<br>2：D/S/D 按选择对象重新定义板子形状。<br>3：Shift+鼠标点击 实现多选。<br>4：Shift+S 键 切换单层显示。<br>5：Q  英寸和毫米 尺寸切换。<br>6：D+R 进入布线规则设置。<br>7：Ctrl+鼠标单击某个线，整个线的NET 网络 呈现高亮状态。<br>8：Ctrl+H+鼠标单击某个线，整个线的NET网络被选中。<br>9：小键盘上的 * （星号键）可以在top、bottom layer切换达到快速切换上下层。另外 +  - 可以把所有显示的层轮流切换。<br>10：U+选NET 点布线删除NET之间的布线<br>11：M+I  可以把选中所有的元件，翻转过来。这样可以在上下层切换，方便布线，调整印丝层。<br>12：鼠标点击器件选中，左键按住不放+L可以快速将该器件翻转到另一层。<br>13：器件联合，选中两个器件，然后右击 选择 联合（unions）-从选中的器件生成联合（Create Union from selected objects）这样可以操作两个位置在一起的器件，当要去掉时候  选中器件 右击  联合-从联合打散器件    那么连接在一起的就能够单独操作了。当选中联合的器件，右击选择联合，有个 选择所有的联合 这样一下子选择所有联合的器件。固定的外框就可以联合起来移动操作。<br>14：多根线同时画的时候，每个先画个短的线，按SHIFT 选中所有一起画的线，选好，松开SHIFT，鼠标移动到线头 白点处，然后拖动，那么所有线就一起拖动。 转弯一次，松开， 在拖，又可以转弯。<br>15:  E/D 删线<br>16:  Shift+E 捕捉焊盘开关<br>17：Ctrl+M或者R/M 测量任意两点之间的距离<br>18：L或者O/M 打开图层显示控制界面<br>19：P+G 快速打开敷铜设置<br>20：画线时Ctrl+Shift+Space 在5种线形之间切换<br>21：Shift+B 建立查询<br>22：Ctrl 走线时按下来暂时禁用电气栅格<br>23：T/E 添加或删除泪滴<br>24：P/P 放置焊盘<br>25：P/V 放置过孔<br>26：P/T 画线<br>27：P/D/L 测量尺寸<br>28：Shift+A 调用蛇形走线，再按 1和2改变转角，按 3和4改变间距，按，和。改变宽窄<br>29：Space空格键 在交互布线的过程中，切换布线方向。这很常用。<br>30：主键盘上的1 在交互布线的过程中，切换布线方法（设定每次单击鼠标布1段线还是2段线）。<br>31：主键盘上的2 在交互布线的过程中，添加一个过孔，但不换层。<br>32：J/L 定位到指定的坐标的位置。这时要注意确认左下角的坐标值，如果定位不准，可以放大视图并重新定位，如果还是不准，则需要修改栅格吸附尺寸。（定位坐标应该为吸附尺寸的整数倍）。<br>33：J/C 定位到指定的元件处。在弹出的对话框内输入该元件的编号。<br>34：画线时按住Ctrl+Shift然后滑动滚轮可切换层画线并自动添加过孔。<br>35：Shift+F 查找相似对象。<br>36：R/I/E 生成元件清单。<br>37：T/O 选择打散器件方式。</p><h1 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h1><p>InPolygon 设置敷铜和走线、过孔、焊盘之间的间距<br>InNet（‘’）指定网络<br>IsVia 过孔<br>IsPad 焊盘</p>]]></content>
    
    <summary type="html">
    
      熟练使用Altiumdesigner的快捷键，帮助我们更加高效的进行PCB设计。
    
    </summary>
    
      <category term="hardware" scheme="http://yoursite.com/categories/hardware/"/>
    
    
      <category term="Altiumdesigner" scheme="http://yoursite.com/tags/Altiumdesigner/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>pyinstall的使用</title>
    <link href="http://yoursite.com/2018/01/31/pyinstall%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/31/pyinstall的使用/</id>
    <published>2018-01-31T09:30:57.000Z</published>
    <updated>2018-01-31T14:35:22.383Z</updated>
    
    <content type="html"><![CDATA[<p>在python文件目录下命令行输入（若文件为test.py）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F test.py        //参数-F 表示生成单个exe文件</span><br></pre></td></tr></table></figure></p><p>执行后在该目录下会生成一个dist目录，test.exe文件存放在dist目录下。</p><p>如果运行的是GUI类型的程序，你不想弹出命令窗口，可以采用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w test.py</span><br></pre></td></tr></table></figure></p><p>打包exe时，定制程序图标可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w -i lincn.ico test.py</span><br></pre></td></tr></table></figure></p><p>其中lincn.ico为你希望定制的程序图标。</p><p>当你的py文件引入了多个py，进行程序打包时，将引入的py名称放在主py文件之后即可。</p><p>其他pyinstaller指令如图：<br><img src="/2018/01/31/pyinstall的使用/pyinstaller.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      使用pyinstall将python打包成exe文件
    
    </summary>
    
      <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github write blog</title>
    <link href="http://yoursite.com/2018/01/30/hexo-github-write-blog/"/>
    <id>http://yoursite.com/2018/01/30/hexo-github-write-blog/</id>
    <published>2018-01-30T07:51:07.000Z</published>
    <updated>2019-04-25T14:16:32.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h1><p>定位到我们的hexo根目录，执行命令：<br><code>$ hexo new [layout] &quot;title&quot;</code><br>即可新建一个博文页面。</p><table><thead><tr><th style="text-align:center">布局（layout）</th><th style="text-align:center">存储路径</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">post</td><td style="text-align:center">source/posts</td><td style="text-align:center">默认，可以直接发布</td></tr><tr><td style="text-align:center">page</td><td style="text-align:center">source</td><td style="text-align:center">在source下新建一个文件夹</td></tr><tr><td style="text-align:center">drft</td><td style="text-align:center">source/drafts</td><td style="text-align:center">新建文件将保存到_drafts中</td></tr></tbody></table><p>可以用publish命令将草稿移动到source/posts文件夹下<br><code>$ hexo publish [layout] &lt;title&gt;</code></p><h1 id="二、写博客"><a href="#二、写博客" class="headerlink" title="二、写博客"></a>二、写博客</h1><h2 id="1、博文目录格式"><a href="#1、博文目录格式" class="headerlink" title="1、博文目录格式"></a>1、博文目录格式</h2><p>打开hexo/source/posts目录下的md文件，即可进行博客编写。<br>打开Markdown文件，其格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: hexo-blog  #文章标题</span><br><span class="line">date: 2018-01-30 15:51:07   #创作时间</span><br><span class="line">tags: [标签1, 标签2, 标签3]    #标签</span><br><span class="line">categories: hexo github    #分类</span><br><span class="line">description: 这是一篇教你怎么发布博文的文章    #文章描述</span><br><span class="line">---</span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure></p><p>默认情况下，生成的博文目录会显示全部的内容，如何设置文章摘要的长度呢？<br>答案就是在合适的位置加上<br><code>&lt;!--more--&gt;</code><br>注意如果博文含有description项目，则在博文目录中会优先显示该项的内容。</p><h2 id="2、文字斜体和粗体及分割线"><a href="#2、文字斜体和粗体及分割线" class="headerlink" title="2、文字斜体和粗体及分割线"></a>2、文字斜体和粗体及分割线</h2><p>在博文中文字斜体和粗体的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*这是斜体*或_这也是斜体_</span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：<br><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p></blockquote><p>分割线的语法只需要三个星号<code>*</code>或者三个小短线<code>-</code>号</p><blockquote><p>效果：</p><hr></blockquote><h2 id="3、分级标题"><a href="#3、分级标题" class="headerlink" title="3、分级标题"></a>3、分级标题</h2><p>标题是每篇文章最常用的格式，在Markdown语法中，如果某行文字被定义为标题，只需要<br>在行首加上<code>#</code>符号即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>几级标题就用几个#符号，总共有六级标题，注意每级标题<code>#</code>符号后面的空格要加上。</p><h2 id="4、无序列表"><a href="#4、无序列表" class="headerlink" title="4、无序列表"></a>4、无序列表</h2><p>无序列表的三种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：</p><ul><li>无序列表项1</li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul></blockquote><h2 id="5、绘制表格"><a href="#5、绘制表格" class="headerlink" title="5、绘制表格"></a>5、绘制表格</h2><p>表格的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br></pre></td></tr></table></figure></p><blockquote><p>效果:</p></blockquote><table><thead><tr><th>表头1</th><th style="text-align:left">表头2</th><th style="text-align:center">表头3</th><th style="text-align:right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr></tbody></table><p><strong>注意：</strong>表格前后要换行。</p><h2 id="6、外链接"><a href="#6、外链接" class="headerlink" title="6、外链接"></a>6、外链接</h2><p>在博文中插入一些外链接的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内形式：[我的博客](http://www.lincnwang.tech/)</span><br><span class="line">参考形式：[我的博客][1]，我的学校-[成都信息工程大学][2]</span><br><span class="line">[1]:http://www.lincnwang.tech/</span><br><span class="line">[2]:http://www.cuit.edu.cn/</span><br><span class="line">自动链接：我的博客地址&lt;http://www.lincnwang.tech/&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：<br>行内形式：<a href="http://www.lincnwang.tech/" target="_blank" rel="noopener">我的博客</a><br>参考形式：<a href="http://www.lincnwang.tech/" target="_blank" rel="noopener">我的博客</a>，我的学校-<a href="http://www.cuit.edu.cn/" target="_blank" rel="noopener">成都信息工程大学</a></p></blockquote><p>自动链接：我的博客地址<a href="http://www.lincnwang.tech/" target="_blank" rel="noopener">http://www.lincnwang.tech/</a></p><h2 id="7、文本注释"><a href="#7、文本注释" class="headerlink" title="7、文本注释"></a>7、文本注释</h2><p>在写博文的过程中，我们常常需要对某部分进行注释或者引入某段代码，此时我们需要用到文本的注释功能。代码区域内的文字不会被处理，按照原样输出。</p><h3 id="①引入代码"><a href="#①引入代码" class="headerlink" title="①引入代码"></a>①引入代码</h3><p>第一种：引入单行代码出现一个代码框，需要使用反单引号（电脑Esc键下面的键）夹在需要注释的文本两侧。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`hellow lincnwang`</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：<br><code>hellow lincnwang</code></p></blockquote><p>第二种：多行代码的引入需要在代码段的前后分别使用三个反单引号。</p><blockquote><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">a=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="②引入内容"><a href="#②引入内容" class="headerlink" title="②引入内容"></a>②引入内容</h3><p>第一种：通过在文字开头添加”&gt;”表示注释,例如：</p><blockquote><p>优秀是一种习惯！</p></blockquote><p>第二种：或者每一行前边加入四个空格或者一个tab可以标记一个段落。<br>例如：<br>    成都信息工程大学<br>    优秀是一种习惯</p><h2 id="8、转义字符"><a href="#8、转义字符" class="headerlink" title="8、转义字符"></a>8、转义字符</h2><p>Markdown中的转义字符为\，可以转义的有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\\ 反斜杠</span><br><span class="line">\` 反引号</span><br><span class="line">\* 星号</span><br><span class="line">\_ 下划线</span><br><span class="line">\&#123;\&#125; 大括号</span><br><span class="line">\[\] 中括号</span><br><span class="line">\(\) 小括号</span><br><span class="line">\# 井号</span><br><span class="line">\+ 加号</span><br><span class="line">\- 减号</span><br><span class="line">\. 英文句号</span><br><span class="line">\! 感叹号</span><br></pre></td></tr></table></figure></p><h2 id="9、插入图片"><a href="#9、插入图片" class="headerlink" title="9、插入图片"></a>9、插入图片</h2><p>在hexo中插入图片，首先需要将图片放在source/images/文件夹下或者source/_posts/(博客名文件夹)，然后如下方式进行插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![“图片描述”](/images/你的图片名字.JPG)</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![测试图片](hexo-github-write-blog/one.jpg)</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：</p></blockquote><p><img src="/2018/01/30/hexo-github-write-blog/one.jpg" alt="测试图片"></p><h2 id="10、引入公式"><a href="#10、引入公式" class="headerlink" title="10、引入公式"></a>10、引入公式</h2><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">a=b+c</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><blockquote><p>效果：<br>$$<br>a=b+c<br>$$</p></blockquote><h1 id="三、发布博文"><a href="#三、发布博文" class="headerlink" title="三、发布博文"></a>三、发布博文</h1><blockquote><p><code>hexo g</code>（完整指令为hexo generate），用于生成静态文件。</p><p><code>hexo s</code>（完成指令为hexo server），用于启动服务器，主要用来本地浏览<br>在浏览器输入：<code>localhost:4000</code>,就可以进行访问，发布到网络博客地址可略过这一步。</p><p><code>hexo d</code>（完整指令为hexo deploy），用于将本地文件发布到github等git仓库上。<br>发布完成之后即可登录博客进行浏览。</p></blockquote>]]></content>
    
    <summary type="html">
    
      使用hexo+github搭建博客网站后，发表博客文章
    
    </summary>
    
      <category term="hexo+github 写博客" scheme="http://yoursite.com/categories/hexo-github-%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python tkinter的使用</title>
    <link href="http://yoursite.com/2017/12/27/python-tkinter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/12/27/python-tkinter的使用/</id>
    <published>2017-12-27T13:40:38.000Z</published>
    <updated>2017-12-27T14:08:31.314Z</updated>
    
    <content type="html"><![CDATA[<p>master = Tk()<br>master.title(“度云物联网异或校验工具”)<br>data_dir = “data”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;master = Tk()&lt;br&gt;master.title(“度云物联网异或校验工具”)&lt;br&gt;data_dir = “data”&lt;/p&gt;

      
    
    </summary>
    
      <category term="GUI设计" scheme="http://yoursite.com/categories/GUI%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="software" scheme="http://yoursite.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>基于带通采样定理的高速数据采集系统的硬件电路设计</title>
    <link href="http://yoursite.com/2017/12/13/postLincnwang-%E4%BD%A0%E5%A5%BD/"/>
    <id>http://yoursite.com/2017/12/13/postLincnwang-你好/</id>
    <published>2017-12-13T08:15:33.000Z</published>
    <updated>2017-12-15T04:43:01.299Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 介绍了带通采样定理，它在数据采集中可以降低采样率，但是在实际采集中存在信号混叠，采样“盲区”和频谱反转等问题，对这些问题提出了解决方法。在这个理论基础上，设计了高速数据采集系统的硬件电路，介绍了数据采集ADC 芯片 AD08D1000，以及该芯片的外围差分信号转换电路和时钟信号产生电路，同时还介绍了电源模块电路和用于数据传输的 USB 模块电路。<br><a id="more"></a><br>关键词: 带通采样; 数据采集; ADC08D1000</p><h2 id="Hardware-Circuit-Design-of-High-speed-Data-Acquisition-System-Based-on-Band-pass-Sampling-Theorem"><a href="#Hardware-Circuit-Design-of-High-speed-Data-Acquisition-System-Based-on-Band-pass-Sampling-Theorem" class="headerlink" title="Hardware Circuit Design of High-speed Data Acquisition System Based on Band-pass Sampling Theorem"></a>Hardware Circuit Design of High-speed Data Acquisition System Based on Band-pass Sampling Theorem</h2><p>Abstract: This paper introduced the band-pass sampling theorem. The sampling rate in data collection can be greatly reduced by this theorem. However, problems of signals aliasing, sampling blind area and spectrum reversal were appeared in actual data collection. The paper proposed the solution methods of these problems. Then the hardware circuit of the high-speed data acquisition system was designed based on the theoretical basis. The data acquisition ADC chip AD08D1000, the peripheral difference signal circuit of the chip and the clock signal circuit were introduced. Besides, the power module circuit and the USB module circuit used for data transmission were introduced.<br>Key words: band-pass sampling; data acquisition; ADC08D1000</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>数据采集是获得信息的一种基本手段。随着信息科学技术的迅速发展，它已经成为信息领域中不可缺少的部分。随着科技的不断进步，人们对数据采集系统的要求也越来越高，不仅要求采样的精度高，数据转换速度快，还要求具有抗干扰能力。高速数据采集系统主要包括几个部分:前端调理电路，高速ADC，时钟电路，微处理器以及电源等组成。文中提出一种以NiosⅡ为核心控制器，基于带通采样的高速数据采集系统，并设计了系统中各个部分的硬件电路。</p><h2 id="1-带通采样"><a href="#1-带通采样" class="headerlink" title="1 带通采样"></a>1 带通采样</h2><p>根据奈奎斯特采样定理，对于频带为(0，fh)的信号，要想采样后能够不失真的还原出原信号，则抽样频率必须大于2倍信号的最高频率，即fs≥2fh．但是实际中多数信号是频率很高的信号，对于频率为(fL，fH)的高频率信号，如果用fs≥2fh的采样频率进行采样，现在的ADC器件根本无法实现，且后续的数字信号处理器也无法处理高频率信号。这个时候我们可以通过在软件无线电中应用十分广泛的带通采样定理来采样。</p><h3 id="1．1-带通采样定理理论"><a href="#1．1-带通采样定理理论" class="headerlink" title="1．1 带通采样定理理论"></a>1．1 带通采样定理理论</h3><p>带通采样定理:频带为(fL，fH)的带通信号，带宽B=fH－fL．如果其采样速率满足:<br>f_x=(2(f_L+f_H))/(2n+1)=〖4f〗_0/(2n+1)<br>式中f_0=(f_L+f_H)/2，其中n取能满足f_s=2(f_H-f_L)的整数，那么用fs进行等间隔采样得到的信号能准确的确定原信号。带通采样定理的结果把位于［nB，(n+1)B］(n=0，1，2，3……)不同频带上的信号都用位于(0，B)频带的信号来表示。所以带通采样定理所使用的前提条件是:只允许1个频带上存在信号，不允许其他不相同的频带上同时存在信号。如果其他不相同的频带上存在信号，则会引起信号混叠。这样可以采用抗混叠滤波器来解决，即在采样前先进行滤波，得到想要的带通信号，再进行采样。</p><h3 id="1．2-带通采样中的“盲区”处理"><a href="#1．2-带通采样中的“盲区”处理" class="headerlink" title="1．2 带通采样中的“盲区”处理"></a>1．2 带通采样中的“盲区”处理</h3><p>当抗混叠滤波器是理想的情况下， 通过调节滤波器的中心频率，可以采用同一采样频率f_s=2(f_H-f_L)来对整个频段的信号进行采样，这样可以实现整个频段的无“盲区”采样。但是现实中理想的滤波器是不存在的，可实现的滤波器采样的直接过后就是存在采样“盲区”，当信号落在“盲区”时， 就会被滤波器滤掉，从而无法对信号进行采样并使其数字化。<br>解决这个采样盲区的办法是使用一个主采样频率配合多个“盲区”采样频率进行采样。根据式f_x=(2(f_L+f_H))/(2n+1)=〖4f〗_0/(2n+1)可知“盲区”采样频率:<br>f_sm=4/(2n+1) f_om<br>式中f_om为“盲区”采样中心频率，它与主采样频率f_s的关系为:<br>f_om=(m+1)/2 f_s<br>得:<br>f_sm=(2m+2)/(2n+1) f_s<br>式中m取不同整数对应的不同“盲区”，n的取值尽量使f_sm靠近f_s。</p><h3 id="1．3带通采样中的频谱反转"><a href="#1．3带通采样中的频谱反转" class="headerlink" title="1．3带通采样中的频谱反转"></a>1．3带通采样中的频谱反转</h3><p>带通采样的结果是把位于［nB，(n+1)B］(n=0，1，2，3……)不同频带上的信号都用位于(0，B)频带的信号来表示。当n为偶数时，采样后信号的频谱在零频位置得以还原。但是当n为基数时，采样后信号的频谱在零频位置却发生了翻转。就n=3来说明，频谱为(3B，4B)的信号在采样频谱如图1所示。经过采样频率fs=2B采样后信号的频谱如图2所示，可以看出采样后信号频谱在零频位置(－B，B)上发生了反转，而在(－2B，0)和(0，2B)上信号频谱没有发生反转。在这段频率上信号x(t)的频域表达式为X(w±2πB)，将其进行时域变换得到:<br>X(w±2πB)→e^(±j2πBt) x(t)＝e^(±jπf_s t) x(t)<br>进行离散变换，得到数字化序列为:<br>e^(±jπn) x(n)=(-1)^n x(n)<br>从式中看出，只要将数字化序列进行隔位符号取反，就可以解决n为基数时的频谱反转问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 介绍了带通采样定理，它在数据采集中可以降低采样率，但是在实际采集中存在信号混叠，采样“盲区”和频谱反转等问题，对这些问题提出了解决方法。在这个理论基础上，设计了高速数据采集系统的硬件电路，介绍了数据采集ADC 芯片 AD08D1000，以及该芯片的外围差分信号转换电路和时钟信号产生电路，同时还介绍了电源模块电路和用于数据传输的 USB 模块电路。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="硬件设计" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="hardware" scheme="http://yoursite.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://yoursite.com/2017/12/13/hello-world/"/>
    <id>http://yoursite.com/2017/12/13/hello-world/</id>
    <published>2017-12-13T07:29:52.912Z</published>
    <updated>2017-12-15T05:21:30.073Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://lincnwang.github.io/" target="_blank" rel="noopener">Lincnwang’s  blog</a>! This is my very first post. If you have any problems when read my article, please feel free to leave a message or contact with me, I wish make friend with you. And share something with you!</p><h2 id="HardWare"><a href="#HardWare" class="headerlink" title="HardWare"></a>HardWare</h2><h2 id="SoftWare"><a href="#SoftWare" class="headerlink" title="SoftWare"></a>SoftWare</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://lincnwang.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lincnwang’s  blog&lt;/a&gt;! This is my very first post. If yo
      
    
    </summary>
    
      <category term="交流" scheme="http://yoursite.com/categories/%E4%BA%A4%E6%B5%81/"/>
    
    
  </entry>
  
</feed>
